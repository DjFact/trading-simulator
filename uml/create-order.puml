@startuml
    title Trading Simulator - Create Order
    actor Client
    box "Trading Simulator Private Area" #efefef
        participant Gateway
        participant Auth
        participant Billing
        participant Database
        participant Queues
    end box
    participant Market

    Client -[#gray]> Gateway : <plain>  Create new order
        note right of Client
            assetSymbol: string;
            quantity: number;
            // buy, sell
            action: string;
            // market, limit, stopLoss
            orderType: string;
            limit?: number;
        end note
        deactivate Client

        activate Gateway
             ref over Gateway, Auth: <plain>    check [JWT from headers] and get [user]
             activate Auth
                 break [JWT from headers] isn't valid
                     Auth x-[#red]-x Client : <plain>    Unauthorized (401)
                 end
                 Auth -[#gray]> Database : <plain>  Get user from DB
                 activate Database
                     Database -[#gray]-> Auth : <plain>  Return [user]
                 deactivate Database
                 break user not found
                     Auth x-[#red]-x Client : <plain>    UserNotFound (1010)
                 end
             deactivate Auth
             Gateway -[#gray]> Billing : <plain>    Create new order with [userId, orderData]
        deactivate Gateway

        activate Billing
            break empty limit for no [maker] order
                Billing x-[#red]-x Client : <plain>    LimitPriceNotSet (3002)
            end
            Billing -[#gray]> Market : <plain>  Get current price for [assetSymbol]
        deactivate Billing
        activate Market
            Market -[#gray]-> Billing : <plain>    Return [currentPrice]
        deactivate Market
        activate Billing
            alt start transaction
                Billing -[#gray]> Database : <plain>    Find user account with [userId]
                activate Database
                    Database -[#gray]-> Billing : <plain>    Return [account]
                deactivate Database
                Billing -[#gray]>o Billing : <plain>    Check for insufficient funds
                Billing -[#gray]> Database : <plain>    Create order
                note right of Billing
                    {
                        ...orderDto,
                        status: OrderStatusEnum.Opened,
                        openPrice,
                    }
                end note
                activate Database
                    Database -[#gray]-> Billing : <plain>    Return [order]
                deactivate Database
                alt action === 'buy'
                    Billing -[#gray]>o Billing : <plain>    Increment user reserved funds
                else action === 'sell'
                    Billing -[#gray]>o Billing : <plain>    Increment user reserved assets
                end
                Billing -[#gray]> Database : <plain>    Commit transaction
                activate Database
                    Database -[#gray]>o Database : <plain>    Commit [transactionId]
                    Database -[#gray]-> Billing : <plain>    True
                deactivate Database
            else failed with exception
                Billing -[#gray]> Database : <plain>    Rollback transaction
                activate Database
                    Database -[#gray]>o Database : <plain>    Rollback [transactionId]
                    Database -[#gray]-> Billing : <plain>    True
                deactivate Database
                break Account not found
                    Billing x-[#red]-x Client : <plain>    AccountNotFound (3003)
                end
                break Insufficient funds
                    Billing x-[#red]-x Client : <plain>    InsufficientFunds (3004)
                end
                break Holding not found
                    Billing x-[#red]-x Client : <plain>    HoldingNotFound (3005)
                end
                break Other error
                    Billing x-[#red]-x Client : <plain>    OrderCreationError (3001)
                end
            end
            Billing -[#gray]-> Queues : <plain>    Add [orderId] to [orderType] queue for processing
            activate Queues
            Billing -[#gray]-> Gateway : <plain>    Return [order]
        deactivate Billing
        activate Gateway
            Gateway -[#green]-> Client : <plain>    Return [order]
            note right of Client
                {
                    id: string;
                    userId: string;
                    assetSymbol: string;
                    quantity: number;
                    action: OrderActionTypeEnum;
                    orderType: OrderTypeEnum;
                    limit?: number;
                    openPrice: number;
                    closePrice?: number;
                    total?: number;
                    status: OrderStatusEnum;
                    info?: string;
                    closedAt?: Date;
                    createdAt: Date;
                    updatedAt: Date;
                }
            end note
        deactivate Gateway
@enduml
