version: '3'

services:

  db:
    image: postgres
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
        delay: 30s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      POSTGRES_DB: loyalty
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5432:5432'
    volumes:
      - ~/.docker-conf/postgres:/var/lib/postgresql/data

  redis:
    image: redis:6.0
    ports:
      - '6379:6379'
    volumes:
      - ~/.docker-conf/redis/data:/data

  rabbitmq:
    image: rabbitmq:3.6-management
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
        delay: 30s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    depends_on:
      - gateway

  auth:
    image: 616475584916.dkr.ecr.eu-central-1.amazonaws.com/trading.production.auth:${TAG}
    build:
      context: .
      dockerfile: ./docker/auth/Dockerfile
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
        delay: 30s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    secrets:
      - auth_secrets
    #healthcheck:
    #  test: ["CMD-SHELL", "curl -s -o /dev/null -I -w \"%{http_code}\" http://localhost/healthz | grep -qE \"2[0-9]{2}|3[0-9]{2}|4[0-9]{2}\" || exit 1"]
    #  interval: 20s
    #  timeout: 10s
    #  retries: 3
    #  start_period: 10s
    environment:
      NODE_ENV: local
    depends_on:
      - billing

  billing:
    image: 616475584916.dkr.ecr.eu-central-1.amazonaws.com/trading.production.billing:${TAG}
    build:
      context: .
      dockerfile: ./docker/billing/Dockerfile
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
        delay: 30s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    secrets:
      - billing_secrets
    environment:
      NODE_ENV: local

  gateway:
    image: 616475584916.dkr.ecr.eu-central-1.amazonaws.com/trading.production.gateway:${TAG}
    build:
      context: .
      dockerfile: ./docker/gateway/Dockerfile
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
        delay: 30s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    secrets:
      - gateway_secrets
    environment:
      NODE_ENV: local

  loyalty:
    image: 616475584916.dkr.ecr.eu-central-1.amazonaws.com/trading.production.loyalty:${TAG}
    build:
      context: .
      dockerfile: ./docker/loyalty/Dockerfile
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
        delay: 30s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    secrets:
      - loyalty_secrets
    environment:
      NODE_ENV: local

  mail:
    image: 616475584916.dkr.ecr.eu-central-1.amazonaws.com/trading.production.mail:${TAG}
    build:
      context: .
      dockerfile: ./docker/mail/Dockerfile
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
        delay: 30s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    secrets:
      - mail_secrets
    environment:
      NODE_ENV: local


  worker_market:
    image: 616475584916.dkr.ecr.eu-central-1.amazonaws.com/trading.production.worker_market:${TAG}
    build:
      context: .
      dockerfile: ./docker/worker-market/Dockerfile
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
        delay: 30s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    secrets:
      - worker_secrets
    environment:
      NODE_ENV: local

secrets:
  auth_secrets:
    file: ./env/auth.env
  billing_secrets:
    file: ./env/billing.env
  gateway_secrets:
    file: ./env/gateway.env
  loyalty_secrets:
    file: ./env/loyalty.env
  mail_secrets:
    file: ./env/mail.env
  worker_secrets:
    file: ./env/worker.env